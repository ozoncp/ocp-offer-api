// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-offer-api/ocp-offer-api.proto

package ocp_offer_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Offer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Offer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Grade

	// no validation rules for TeamId

	return nil
}

// OfferValidationError is the validation error returned by Offer.Validate if
// the designated constraints aren't met.
type OfferValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfferValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfferValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfferValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfferValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfferValidationError) ErrorName() string { return "OfferValidationError" }

// Error satisfies the builtin error interface
func (e OfferValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfferValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfferValidationError{}

// Validate checks the field values on CreateOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateOfferV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetGrade() <= 0 {
		return CreateOfferV1RequestValidationError{
			field:  "Grade",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTeamId() <= 0 {
		return CreateOfferV1RequestValidationError{
			field:  "TeamId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreateOfferV1RequestValidationError is the validation error returned by
// CreateOfferV1Request.Validate if the designated constraints aren't met.
type CreateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferV1RequestValidationError) ErrorName() string {
	return "CreateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferV1RequestValidationError{}

// Validate checks the field values on CreateOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateOfferV1ResponseValidationError is the validation error returned by
// CreateOfferV1Response.Validate if the designated constraints aren't met.
type CreateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferV1ResponseValidationError) ErrorName() string {
	return "CreateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferV1ResponseValidationError{}

// Validate checks the field values on TaskCreateOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskCreateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return TaskCreateOfferV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetGrade() <= 0 {
		return TaskCreateOfferV1RequestValidationError{
			field:  "Grade",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTeamId() <= 0 {
		return TaskCreateOfferV1RequestValidationError{
			field:  "TeamId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskCreateOfferV1RequestValidationError is the validation error returned by
// TaskCreateOfferV1Request.Validate if the designated constraints aren't met.
type TaskCreateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateOfferV1RequestValidationError) ErrorName() string {
	return "TaskCreateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateOfferV1RequestValidationError{}

// Validate checks the field values on TaskCreateOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskCreateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TaskCreateOfferV1ResponseValidationError is the validation error returned by
// TaskCreateOfferV1Response.Validate if the designated constraints aren't met.
type TaskCreateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateOfferV1ResponseValidationError) ErrorName() string {
	return "TaskCreateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateOfferV1ResponseValidationError{}

// Validate checks the field values on MultiCreateOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOffers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateOfferV1RequestValidationError{
					field:  fmt.Sprintf("Offers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateOfferV1RequestValidationError is the validation error returned by
// MultiCreateOfferV1Request.Validate if the designated constraints aren't met.
type MultiCreateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateOfferV1RequestValidationError) ErrorName() string {
	return "MultiCreateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateOfferV1RequestValidationError{}

// Validate checks the field values on MultiCreateOfferV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// MultiCreateOfferV1ResponseValidationError is the validation error returned
// by MultiCreateOfferV1Response.Validate if the designated constraints aren't met.
type MultiCreateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateOfferV1ResponseValidationError) ErrorName() string {
	return "MultiCreateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateOfferV1ResponseValidationError{}

// Validate checks the field values on TaskMultiCreateOfferV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskMultiCreateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOffers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskMultiCreateOfferV1RequestValidationError{
					field:  fmt.Sprintf("Offers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetBatchSize() <= 0 {
		return TaskMultiCreateOfferV1RequestValidationError{
			field:  "BatchSize",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskMultiCreateOfferV1RequestValidationError is the validation error
// returned by TaskMultiCreateOfferV1Request.Validate if the designated
// constraints aren't met.
type TaskMultiCreateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskMultiCreateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskMultiCreateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskMultiCreateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskMultiCreateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskMultiCreateOfferV1RequestValidationError) ErrorName() string {
	return "TaskMultiCreateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskMultiCreateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskMultiCreateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskMultiCreateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskMultiCreateOfferV1RequestValidationError{}

// Validate checks the field values on TaskMultiCreateOfferV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskMultiCreateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TaskMultiCreateOfferV1ResponseValidationError is the validation error
// returned by TaskMultiCreateOfferV1Response.Validate if the designated
// constraints aren't met.
type TaskMultiCreateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskMultiCreateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskMultiCreateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskMultiCreateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskMultiCreateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskMultiCreateOfferV1ResponseValidationError) ErrorName() string {
	return "TaskMultiCreateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskMultiCreateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskMultiCreateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskMultiCreateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskMultiCreateOfferV1ResponseValidationError{}

// Validate checks the field values on DescribeOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return DescribeOfferV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeOfferV1RequestValidationError is the validation error returned by
// DescribeOfferV1Request.Validate if the designated constraints aren't met.
type DescribeOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeOfferV1RequestValidationError) ErrorName() string {
	return "DescribeOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeOfferV1RequestValidationError{}

// Validate checks the field values on DescribeOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOffer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeOfferV1ResponseValidationError{
				field:  "Offer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeOfferV1ResponseValidationError is the validation error returned by
// DescribeOfferV1Response.Validate if the designated constraints aren't met.
type DescribeOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeOfferV1ResponseValidationError) ErrorName() string {
	return "DescribeOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeOfferV1ResponseValidationError{}

// Validate checks the field values on ListOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPagination() == nil {
		return ListOfferV1RequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOfferV1RequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListOfferV1RequestValidationError is the validation error returned by
// ListOfferV1Request.Validate if the designated constraints aren't met.
type ListOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfferV1RequestValidationError) ErrorName() string {
	return "ListOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfferV1RequestValidationError{}

// Validate checks the field values on ListOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOfferV1ResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOffers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOfferV1ResponseValidationError{
					field:  fmt.Sprintf("Offers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOfferV1ResponseValidationError is the validation error returned by
// ListOfferV1Response.Validate if the designated constraints aren't met.
type ListOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOfferV1ResponseValidationError) ErrorName() string {
	return "ListOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOfferV1ResponseValidationError{}

// Validate checks the field values on UpdateOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateOfferV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return UpdateOfferV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetGrade() <= 0 {
		return UpdateOfferV1RequestValidationError{
			field:  "Grade",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTeamId() <= 0 {
		return UpdateOfferV1RequestValidationError{
			field:  "TeamId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UpdateOfferV1RequestValidationError is the validation error returned by
// UpdateOfferV1Request.Validate if the designated constraints aren't met.
type UpdateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferV1RequestValidationError) ErrorName() string {
	return "UpdateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferV1RequestValidationError{}

// Validate checks the field values on UpdateOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateOfferV1ResponseValidationError is the validation error returned by
// UpdateOfferV1Response.Validate if the designated constraints aren't met.
type UpdateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferV1ResponseValidationError) ErrorName() string {
	return "UpdateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferV1ResponseValidationError{}

// Validate checks the field values on TaskUpdateOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskUpdateOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return TaskUpdateOfferV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return TaskUpdateOfferV1RequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetGrade() <= 0 {
		return TaskUpdateOfferV1RequestValidationError{
			field:  "Grade",
			reason: "value must be greater than 0",
		}
	}

	if m.GetTeamId() <= 0 {
		return TaskUpdateOfferV1RequestValidationError{
			field:  "TeamId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskUpdateOfferV1RequestValidationError is the validation error returned by
// TaskUpdateOfferV1Request.Validate if the designated constraints aren't met.
type TaskUpdateOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskUpdateOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskUpdateOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskUpdateOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskUpdateOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskUpdateOfferV1RequestValidationError) ErrorName() string {
	return "TaskUpdateOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskUpdateOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskUpdateOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskUpdateOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskUpdateOfferV1RequestValidationError{}

// Validate checks the field values on TaskUpdateOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskUpdateOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TaskUpdateOfferV1ResponseValidationError is the validation error returned by
// TaskUpdateOfferV1Response.Validate if the designated constraints aren't met.
type TaskUpdateOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskUpdateOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskUpdateOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskUpdateOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskUpdateOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskUpdateOfferV1ResponseValidationError) ErrorName() string {
	return "TaskUpdateOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskUpdateOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskUpdateOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskUpdateOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskUpdateOfferV1ResponseValidationError{}

// Validate checks the field values on RemoveOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RemoveOfferV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveOfferV1RequestValidationError is the validation error returned by
// RemoveOfferV1Request.Validate if the designated constraints aren't met.
type RemoveOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOfferV1RequestValidationError) ErrorName() string {
	return "RemoveOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOfferV1RequestValidationError{}

// Validate checks the field values on RemoveOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveOfferV1ResponseValidationError is the validation error returned by
// RemoveOfferV1Response.Validate if the designated constraints aren't met.
type RemoveOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOfferV1ResponseValidationError) ErrorName() string {
	return "RemoveOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOfferV1ResponseValidationError{}

// Validate checks the field values on TaskRemoveOfferV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskRemoveOfferV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return TaskRemoveOfferV1RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// TaskRemoveOfferV1RequestValidationError is the validation error returned by
// TaskRemoveOfferV1Request.Validate if the designated constraints aren't met.
type TaskRemoveOfferV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskRemoveOfferV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskRemoveOfferV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskRemoveOfferV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskRemoveOfferV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskRemoveOfferV1RequestValidationError) ErrorName() string {
	return "TaskRemoveOfferV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskRemoveOfferV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskRemoveOfferV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskRemoveOfferV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskRemoveOfferV1RequestValidationError{}

// Validate checks the field values on TaskRemoveOfferV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TaskRemoveOfferV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TaskRemoveOfferV1ResponseValidationError is the validation error returned by
// TaskRemoveOfferV1Response.Validate if the designated constraints aren't met.
type TaskRemoveOfferV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskRemoveOfferV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskRemoveOfferV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskRemoveOfferV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskRemoveOfferV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskRemoveOfferV1ResponseValidationError) ErrorName() string {
	return "TaskRemoveOfferV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskRemoveOfferV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskRemoveOfferV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskRemoveOfferV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskRemoveOfferV1ResponseValidationError{}

// Validate checks the field values on PaginationInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaginationInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for TotalPages

	// no validation rules for TotalItems

	// no validation rules for PerPage

	// no validation rules for HasNextPage

	// no validation rules for HasPreviousPage

	return nil
}

// PaginationInfoValidationError is the validation error returned by
// PaginationInfo.Validate if the designated constraints aren't met.
type PaginationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationInfoValidationError) ErrorName() string { return "PaginationInfoValidationError" }

// Error satisfies the builtin error interface
func (e PaginationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationInfoValidationError{}

// Validate checks the field values on PaginationInput with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginationInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Cursor

	if val := m.GetTake(); val <= 0 || val > 10000 {
		return PaginationInputValidationError{
			field:  "Take",
			reason: "value must be inside range (0, 10000]",
		}
	}

	if m.GetSkip() < 0 {
		return PaginationInputValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
	}

	return nil
}

// PaginationInputValidationError is the validation error returned by
// PaginationInput.Validate if the designated constraints aren't met.
type PaginationInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationInputValidationError) ErrorName() string { return "PaginationInputValidationError" }

// Error satisfies the builtin error interface
func (e PaginationInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationInputValidationError{}
