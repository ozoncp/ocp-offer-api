// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-offer-api/internal/repo (interfaces: IRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-offer-api/internal/models"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateOffer mocks base method.
func (m *MockIRepository) CreateOffer(arg0 context.Context, arg1 models.Offer) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer.
func (mr *MockIRepositoryMockRecorder) CreateOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockIRepository)(nil).CreateOffer), arg0, arg1)
}

// DescribeOffer mocks base method.
func (m *MockIRepository) DescribeOffer(arg0 context.Context, arg1 uint64) (*models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOffer", arg0, arg1)
	ret0, _ := ret[0].(*models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOffer indicates an expected call of DescribeOffer.
func (mr *MockIRepositoryMockRecorder) DescribeOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOffer", reflect.TypeOf((*MockIRepository)(nil).DescribeOffer), arg0, arg1)
}

// ListOffer mocks base method.
func (m *MockIRepository) ListOffer(arg0 context.Context, arg1 models.PaginationInput) ([]models.Offer, *models.PaginationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffer", arg0, arg1)
	ret0, _ := ret[0].([]models.Offer)
	ret1, _ := ret[1].(*models.PaginationInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOffer indicates an expected call of ListOffer.
func (mr *MockIRepositoryMockRecorder) ListOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffer", reflect.TypeOf((*MockIRepository)(nil).ListOffer), arg0, arg1)
}

// MultiCreateOffer mocks base method.
func (m *MockIRepository) MultiCreateOffer(arg0 context.Context, arg1 []models.Offer) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiCreateOffer", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiCreateOffer indicates an expected call of MultiCreateOffer.
func (mr *MockIRepositoryMockRecorder) MultiCreateOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiCreateOffer", reflect.TypeOf((*MockIRepository)(nil).MultiCreateOffer), arg0, arg1)
}

// RemoveOffer mocks base method.
func (m *MockIRepository) RemoveOffer(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOffer indicates an expected call of RemoveOffer.
func (mr *MockIRepositoryMockRecorder) RemoveOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOffer", reflect.TypeOf((*MockIRepository)(nil).RemoveOffer), arg0, arg1)
}

// UpdateOffer mocks base method.
func (m *MockIRepository) UpdateOffer(arg0 context.Context, arg1 models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOffer indicates an expected call of UpdateOffer.
func (mr *MockIRepositoryMockRecorder) UpdateOffer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffer", reflect.TypeOf((*MockIRepository)(nil).UpdateOffer), arg0, arg1)
}
